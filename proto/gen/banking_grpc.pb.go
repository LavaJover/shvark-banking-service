// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: banking.proto

package bankingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankingService_CreateBankDetail_FullMethodName                   = "/banking.BankingService/CreateBankDetail"
	BankingService_GetBankDetailByID_FullMethodName                  = "/banking.BankingService/GetBankDetailByID"
	BankingService_UpdateBankDetail_FullMethodName                   = "/banking.BankingService/UpdateBankDetail"
	BankingService_DeleteBankDetail_FullMethodName                   = "/banking.BankingService/DeleteBankDetail"
	BankingService_GetBankDetailsByTraderID_FullMethodName           = "/banking.BankingService/GetBankDetailsByTraderID"
	BankingService_GetEligibleBankDetails_FullMethodName             = "/banking.BankingService/GetEligibleBankDetails"
	BankingService_CreateBank_FullMethodName                         = "/banking.BankingService/CreateBank"
	BankingService_GetBankByName_FullMethodName                      = "/banking.BankingService/GetBankByName"
	BankingService_GetBanksByCountry_FullMethodName                  = "/banking.BankingService/GetBanksByCountry"
	BankingService_DeleteBankByID_FullMethodName                     = "/banking.BankingService/DeleteBankByID"
	BankingService_GetBankByID_FullMethodName                        = "/banking.BankingService/GetBankByID"
	BankingService_GetBankDetailsStatisticsByTraderID_FullMethodName = "/banking.BankingService/GetBankDetailsStatisticsByTraderID"
)

// BankingServiceClient is the client API for BankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingServiceClient interface {
	CreateBankDetail(ctx context.Context, in *CreateBankDetailRequest, opts ...grpc.CallOption) (*CreateBankDetailResponse, error)
	GetBankDetailByID(ctx context.Context, in *GetBankDetailByIDRequest, opts ...grpc.CallOption) (*GetBankDetailByIDResponse, error)
	UpdateBankDetail(ctx context.Context, in *UpdateBankDetailRequest, opts ...grpc.CallOption) (*UpdateBankDetailResponse, error)
	DeleteBankDetail(ctx context.Context, in *DeleteBankDetailRequest, opts ...grpc.CallOption) (*DeleteBankDetailResponse, error)
	GetBankDetailsByTraderID(ctx context.Context, in *GetBankDetailsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsByTraderIDResponse, error)
	GetEligibleBankDetails(ctx context.Context, in *GetEligibleBankDetailsRequest, opts ...grpc.CallOption) (*GetEligibleBankDetailsResponse, error)
	CreateBank(ctx context.Context, in *CreateBankRequest, opts ...grpc.CallOption) (*CreateBankResponse, error)
	GetBankByName(ctx context.Context, in *GetBankByNameRequest, opts ...grpc.CallOption) (*GetBankByNameResponse, error)
	GetBanksByCountry(ctx context.Context, in *GetBanksByCountryRequest, opts ...grpc.CallOption) (*GetBanksByCountryResponse, error)
	DeleteBankByID(ctx context.Context, in *DeleteBankByIDRequest, opts ...grpc.CallOption) (*DeleteBankByIDResponse, error)
	GetBankByID(ctx context.Context, in *GetBankByIDRequest, opts ...grpc.CallOption) (*GetBankByIDResponse, error)
	GetBankDetailsStatisticsByTraderID(ctx context.Context, in *GetBankDetailsStatisticsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsStatisticsByTraderIDResponse, error)
}

type bankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingServiceClient(cc grpc.ClientConnInterface) BankingServiceClient {
	return &bankingServiceClient{cc}
}

func (c *bankingServiceClient) CreateBankDetail(ctx context.Context, in *CreateBankDetailRequest, opts ...grpc.CallOption) (*CreateBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankDetailResponse)
	err := c.cc.Invoke(ctx, BankingService_CreateBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankDetailByID(ctx context.Context, in *GetBankDetailByIDRequest, opts ...grpc.CallOption) (*GetBankDetailByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailByIDResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankDetailByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) UpdateBankDetail(ctx context.Context, in *UpdateBankDetailRequest, opts ...grpc.CallOption) (*UpdateBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankDetailResponse)
	err := c.cc.Invoke(ctx, BankingService_UpdateBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) DeleteBankDetail(ctx context.Context, in *DeleteBankDetailRequest, opts ...grpc.CallOption) (*DeleteBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankDetailResponse)
	err := c.cc.Invoke(ctx, BankingService_DeleteBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankDetailsByTraderID(ctx context.Context, in *GetBankDetailsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsByTraderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailsByTraderIDResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankDetailsByTraderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetEligibleBankDetails(ctx context.Context, in *GetEligibleBankDetailsRequest, opts ...grpc.CallOption) (*GetEligibleBankDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEligibleBankDetailsResponse)
	err := c.cc.Invoke(ctx, BankingService_GetEligibleBankDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) CreateBank(ctx context.Context, in *CreateBankRequest, opts ...grpc.CallOption) (*CreateBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankResponse)
	err := c.cc.Invoke(ctx, BankingService_CreateBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankByName(ctx context.Context, in *GetBankByNameRequest, opts ...grpc.CallOption) (*GetBankByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankByNameResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBanksByCountry(ctx context.Context, in *GetBanksByCountryRequest, opts ...grpc.CallOption) (*GetBanksByCountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBanksByCountryResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBanksByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) DeleteBankByID(ctx context.Context, in *DeleteBankByIDRequest, opts ...grpc.CallOption) (*DeleteBankByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankByIDResponse)
	err := c.cc.Invoke(ctx, BankingService_DeleteBankByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankByID(ctx context.Context, in *GetBankByIDRequest, opts ...grpc.CallOption) (*GetBankByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankByIDResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingServiceClient) GetBankDetailsStatisticsByTraderID(ctx context.Context, in *GetBankDetailsStatisticsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsStatisticsByTraderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailsStatisticsByTraderIDResponse)
	err := c.cc.Invoke(ctx, BankingService_GetBankDetailsStatisticsByTraderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServiceServer is the server API for BankingService service.
// All implementations must embed UnimplementedBankingServiceServer
// for forward compatibility.
type BankingServiceServer interface {
	CreateBankDetail(context.Context, *CreateBankDetailRequest) (*CreateBankDetailResponse, error)
	GetBankDetailByID(context.Context, *GetBankDetailByIDRequest) (*GetBankDetailByIDResponse, error)
	UpdateBankDetail(context.Context, *UpdateBankDetailRequest) (*UpdateBankDetailResponse, error)
	DeleteBankDetail(context.Context, *DeleteBankDetailRequest) (*DeleteBankDetailResponse, error)
	GetBankDetailsByTraderID(context.Context, *GetBankDetailsByTraderIDRequest) (*GetBankDetailsByTraderIDResponse, error)
	GetEligibleBankDetails(context.Context, *GetEligibleBankDetailsRequest) (*GetEligibleBankDetailsResponse, error)
	CreateBank(context.Context, *CreateBankRequest) (*CreateBankResponse, error)
	GetBankByName(context.Context, *GetBankByNameRequest) (*GetBankByNameResponse, error)
	GetBanksByCountry(context.Context, *GetBanksByCountryRequest) (*GetBanksByCountryResponse, error)
	DeleteBankByID(context.Context, *DeleteBankByIDRequest) (*DeleteBankByIDResponse, error)
	GetBankByID(context.Context, *GetBankByIDRequest) (*GetBankByIDResponse, error)
	GetBankDetailsStatisticsByTraderID(context.Context, *GetBankDetailsStatisticsByTraderIDRequest) (*GetBankDetailsStatisticsByTraderIDResponse, error)
	mustEmbedUnimplementedBankingServiceServer()
}

// UnimplementedBankingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankingServiceServer struct{}

func (UnimplementedBankingServiceServer) CreateBankDetail(context.Context, *CreateBankDetailRequest) (*CreateBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankDetail not implemented")
}
func (UnimplementedBankingServiceServer) GetBankDetailByID(context.Context, *GetBankDetailByIDRequest) (*GetBankDetailByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailByID not implemented")
}
func (UnimplementedBankingServiceServer) UpdateBankDetail(context.Context, *UpdateBankDetailRequest) (*UpdateBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankDetail not implemented")
}
func (UnimplementedBankingServiceServer) DeleteBankDetail(context.Context, *DeleteBankDetailRequest) (*DeleteBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankDetail not implemented")
}
func (UnimplementedBankingServiceServer) GetBankDetailsByTraderID(context.Context, *GetBankDetailsByTraderIDRequest) (*GetBankDetailsByTraderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailsByTraderID not implemented")
}
func (UnimplementedBankingServiceServer) GetEligibleBankDetails(context.Context, *GetEligibleBankDetailsRequest) (*GetEligibleBankDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEligibleBankDetails not implemented")
}
func (UnimplementedBankingServiceServer) CreateBank(context.Context, *CreateBankRequest) (*CreateBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBank not implemented")
}
func (UnimplementedBankingServiceServer) GetBankByName(context.Context, *GetBankByNameRequest) (*GetBankByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankByName not implemented")
}
func (UnimplementedBankingServiceServer) GetBanksByCountry(context.Context, *GetBanksByCountryRequest) (*GetBanksByCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanksByCountry not implemented")
}
func (UnimplementedBankingServiceServer) DeleteBankByID(context.Context, *DeleteBankByIDRequest) (*DeleteBankByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankByID not implemented")
}
func (UnimplementedBankingServiceServer) GetBankByID(context.Context, *GetBankByIDRequest) (*GetBankByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankByID not implemented")
}
func (UnimplementedBankingServiceServer) GetBankDetailsStatisticsByTraderID(context.Context, *GetBankDetailsStatisticsByTraderIDRequest) (*GetBankDetailsStatisticsByTraderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailsStatisticsByTraderID not implemented")
}
func (UnimplementedBankingServiceServer) mustEmbedUnimplementedBankingServiceServer() {}
func (UnimplementedBankingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServiceServer will
// result in compilation errors.
type UnsafeBankingServiceServer interface {
	mustEmbedUnimplementedBankingServiceServer()
}

func RegisterBankingServiceServer(s grpc.ServiceRegistrar, srv BankingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankingService_ServiceDesc, srv)
}

func _BankingService_CreateBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CreateBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CreateBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CreateBankDetail(ctx, req.(*CreateBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankDetailByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankDetailByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankDetailByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankDetailByID(ctx, req.(*GetBankDetailByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_UpdateBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).UpdateBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_UpdateBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).UpdateBankDetail(ctx, req.(*UpdateBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_DeleteBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).DeleteBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_DeleteBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).DeleteBankDetail(ctx, req.(*DeleteBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankDetailsByTraderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailsByTraderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankDetailsByTraderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankDetailsByTraderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankDetailsByTraderID(ctx, req.(*GetBankDetailsByTraderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetEligibleBankDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEligibleBankDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetEligibleBankDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetEligibleBankDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetEligibleBankDetails(ctx, req.(*GetEligibleBankDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_CreateBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).CreateBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_CreateBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).CreateBank(ctx, req.(*CreateBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankByName(ctx, req.(*GetBankByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBanksByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanksByCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBanksByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBanksByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBanksByCountry(ctx, req.(*GetBanksByCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_DeleteBankByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).DeleteBankByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_DeleteBankByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).DeleteBankByID(ctx, req.(*DeleteBankByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankByID(ctx, req.(*GetBankByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankingService_GetBankDetailsStatisticsByTraderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailsStatisticsByTraderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServiceServer).GetBankDetailsStatisticsByTraderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankingService_GetBankDetailsStatisticsByTraderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServiceServer).GetBankDetailsStatisticsByTraderID(ctx, req.(*GetBankDetailsStatisticsByTraderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankingService_ServiceDesc is the grpc.ServiceDesc for BankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banking.BankingService",
	HandlerType: (*BankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankDetail",
			Handler:    _BankingService_CreateBankDetail_Handler,
		},
		{
			MethodName: "GetBankDetailByID",
			Handler:    _BankingService_GetBankDetailByID_Handler,
		},
		{
			MethodName: "UpdateBankDetail",
			Handler:    _BankingService_UpdateBankDetail_Handler,
		},
		{
			MethodName: "DeleteBankDetail",
			Handler:    _BankingService_DeleteBankDetail_Handler,
		},
		{
			MethodName: "GetBankDetailsByTraderID",
			Handler:    _BankingService_GetBankDetailsByTraderID_Handler,
		},
		{
			MethodName: "GetEligibleBankDetails",
			Handler:    _BankingService_GetEligibleBankDetails_Handler,
		},
		{
			MethodName: "CreateBank",
			Handler:    _BankingService_CreateBank_Handler,
		},
		{
			MethodName: "GetBankByName",
			Handler:    _BankingService_GetBankByName_Handler,
		},
		{
			MethodName: "GetBanksByCountry",
			Handler:    _BankingService_GetBanksByCountry_Handler,
		},
		{
			MethodName: "DeleteBankByID",
			Handler:    _BankingService_DeleteBankByID_Handler,
		},
		{
			MethodName: "GetBankByID",
			Handler:    _BankingService_GetBankByID_Handler,
		},
		{
			MethodName: "GetBankDetailsStatisticsByTraderID",
			Handler:    _BankingService_GetBankDetailsStatisticsByTraderID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking.proto",
}
